where(@cw_aws)
.what("MetricName='CPU*';Namespace='AWS/RDS';Region='eu-*|us-*'";
      "MetricName='FreeableMemory';Namespace='AWS/RDS';Region='us-*'";
      "MetricName='IOPS*';Namespace='AWS/RDS';Region='us-*'";
      "MetricName='DiskQueueDepth';Namespace='AWS/RDS';Stat='Maximum';Region='us-*'";
      "MetricName='DatabaseConnections';Namespace='AWS/RDS;Stat=Average;Stat='Maximum';Region='us-*'";
      "MetricName='Latency*';DBInstanceIdentifier='*prod';Stat='Maximum';Namespace='AWS/RDS';Region='us-*'"
    )
.when(14d)
.window(1d)

.note("### DB connection count
Watch for monotonic increase as it may indicate leaks")
.request($where[0];$what[4];$when[0];$window[0]).as($ts_connections)
.chart($ts_connections;@bar)

.note("### DB operation latency
Watch for monotonic increase or spikes as it may indicate perf degradations")
.request($where[0];$what[5];$when[0];$window[0]).as($ts_latency)
.chart($ts_latency;@barstack)

// Performance Metrics
.request($where[0];$what[2];$when[0];$window[0]).as($ts_iops)
.filter($ts_iops; "MetricName='ReadIOPS'").as($ts_read)
.filter($ts_iops; "MetricName='WriteIOPS'").as($ts_write)

.merge($ts_read;average).as($ts_read_us)
.merge($ts_write;average).as($ts_write_us)

.note("### Read and Write IOPS (count/sec)
If max is above 11K/sec application performance may be donwgraded.
If max is below 5K/sec you may save $ by scaling down DB instance
")
.chart($ts_read_us;$ts_write_us;@linestack)

.request($where[0];$what[3];$when[0];$window[0]).as($ts_queue)
.merge($ts_queue;average).as($ts_queue_depth_us)
.note("### Disk queue depth
Application performance can be degraded if queue depth increases.
")
.chart($ts_queue_depth_us;@linestack)

// CPU Metrics
.request($where[0];$what[0];$when[0];$window[0]).as($ts_cpu_metrics)
.filter($ts_cpu_metrics; "MetricName='CPUUtilization'").as($ts_cpu_util)
.filter($ts_cpu_metrics; "MetricName='CPUCreditUsage'").as($ts_cpu_credit)
.filter($ts_cpu_metrics; "MetricName='CPUCreditBalance'").as($ts_cpu_balance)

.merge($ts_cpu_util;average).as($ts_cpu_util_us)
.merge($ts_cpu_credit;sum).as($ts_cpu_credit_us)
.merge($ts_cpu_balance;sum).as($ts_cpu_balance_us)

.note("### Average CPU Utilization (percentage)")
.chart($ts_cpu_util_us;@line)

.note("### CPU Performance burst balance and usage")
.chart($ts_cpu_credit_us;$ts_cpu_balance_us;@linestack)

// Memory Metrics
.request($where[0];$what[1];$when[0];$window[0]).as($ts_mem)
.merge($ts_mem;average).as($ts_mem_us)
.note("### Available memory (Bytes) 
")
.chart($ts_mem_us;@bar)
