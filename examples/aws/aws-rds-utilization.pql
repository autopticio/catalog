where(@cw_aws_east;@cw_aws_west)
.what("MetricName='CPU*'; Namespace='AWS/RDS'";
      "MetricName='FreeableMemory'; Namespace='AWS/RDS'";
      "MetricName='*IOPS'; Namespace='AWS/RDS'";
      "MetricName='BurstBalance'; Namespace='AWS/RDS'";
      "MetricName='FreeStorageSpace'; Namespace='AWS/RDS; Stat=Average";
      "MetricName='ResourceCount'; Namespace='AWS/Usage; Type='Resource'; Resource='AllocatedStorage'; Stat=Average";
      "MetricName='*Latency'; Namespace='AWS/RDS'"
    )
.when(7d)
.window(3h;5m)

//////////////////////////////////////////////////////////////////////////////////
// CPU Metrics


.request($where[0];$what[0];$when[0];$window[0]).as($ts_cpu_metrics_east)
.filter($ts_cpu_metrics_east; "MetricName='CPUUtilization'").as($ts_cpu_util_east)
.filter($ts_cpu_metrics_east; "MetricName='CPUCreditUsage'").as($ts_cpu_credit_east)
.filter($ts_cpu_metrics_east; "MetricName='CPUCreditBalance'").as($ts_cpu_balance_east)
//
.request($where[1];$what[0];$when[0];$window[0]).as($ts_cpu_metrics_west)
.filter($ts_cpu_metrics_west; "MetricName='CPUUtilization'").as($ts_cpu_util_west)
.filter($ts_cpu_metrics_west; "MetricName='CPUCreditUsage'").as($ts_cpu_credit_west)
.filter($ts_cpu_metrics_west; "MetricName='CPUCreditBalance'").as($ts_cpu_balance_west)
//
.merge($ts_cpu_util_east;$ts_cpu_util_west;average).as($ts_cpu_util_us)
.merge($ts_cpu_credit_east;$ts_cpu_credit_west;sum).as($ts_cpu_credit_us)
.merge($ts_cpu_balance_east;$ts_cpu_balance_west;sum).as($ts_cpu_balance_us)

//.tail($ts_cpu_util_us; 5%).as($cpu_util_recent)
//.average($cpu_util_recent).as($avg_cpu_util)
//.assert($avg_cpu_util > 0.85).as($cpu_check)

.note("<b>Average CPU Utilization (percentage) </b>")
.chart($ts_cpu_util_us;@line)

.note("<b>CPU Performance burst balance and usage </b>")
.chart($ts_cpu_credit_us;$ts_cpu_balance_us;@linestack)

//////////////////////////////////////////////////////////////////////////////////
// Memory Metrics

.request($where[0];$what[1];$when[0];$window[1]).as($ts_mem_east)
.request($where[1];$what[1];$when[0];$window[1]).as($ts_mem_west)

.merge($ts_mem_east;$ts_mem_west;average).as($ts_mem_us)

//.max($ts_mem_us).as($max_mem)
//.min($ts_mem_us).as($min_mem)
//.math(1-($min_mem/$max_mem)).as($peak_mem)
//.assert($peak_mem > 0.90).as($mem_check)
.note("<b>Available memory (Bytes) </b>")
.note("Peak memory consumption is: $peak_mem ")

.chart($ts_mem_us;@bar)

//////////////////////////////////////////////////////////////////////////////////
// Performance Metrics

.request($where[0];$what[2];$when[0];$window[1]).as($ts_iops_east)
.request($where[0];$what[3];$when[0];$window[1]).as($ts_burst_east)
.request($where[1];$what[2];$when[0];$window[1]).as($ts_iops_west)
.request($where[1];$what[3];$when[0];$window[1]).as($ts_burst_west)

.filter($ts_iops_east; "MetricName='ReadIOPS'").as($ts_read_east)
.filter($ts_iops_east; "MetricName='WriteIOPS'").as($ts_write_east)
.filter($ts_iops_west; "MetricName='ReadIOPS'").as($ts_read_west)
.filter($ts_iops_west; "MetricName='WriteIOPS'").as($ts_write_west)

.merge($ts_read_east;$ts_read_west;average).as($ts_read_us)
.merge($ts_write_east;$ts_write_west;average).as($ts_write_us)
.merge($ts_burst_east;$ts_burst_west;average).as($ts_burst_us)
//.merge($ts_iops_east;$ts_iops_west;sum).as($ts_iops_total)

.note("<b>Read and Write IOPS (count/sec) </b>")
.note("If max is above 11K/sec application performance may be donwgraded")
.note("If max is below 5K/sec you may save $ by scaling down DB instance")
.chart($ts_read_us;$ts_write_us;@linestack)

.note("<b>Burst bucket IO credits balance</b>")
.note("Application performance can be degraded if reaches zero. ")
.chart($ts_burst_us;@linestack)

//.max($ts_iops_total).as($max_IOPS)
//.assert($max_IOPS > 11000).as($upgrade_iops)
//.assert($max_IOPS < 5000).as($downgrade_iops)

.request($where[0];$what[6];$when[0];$window[1]).as($ts_latency_east)
.request($where[1];$what[6];$when[0];$window[1]).as($ts_latency_west)

.filter($ts_latency_east; "MetricName='ReadLatency'").as($ts_readLatency_east)
.filter($ts_latency_east; "MetricName='WriteLatency'").as($ts_writeLatency_east)
.filter($ts_latency_west; "MetricName='ReadLatency'").as($ts_readLatency_west)
.filter($ts_latency_west; "MetricName='WriteLatency'").as($ts_writeLatency_west)

.merge($ts_readLatency_east;$ts_readLatency_west;average).as($ts_readLatency_us)
.merge($ts_writeLatency_east;$ts_writeLatency_west;average).as($ts_writeLatency_us)


.note("<b>Read and Write Latency (sec) </b>")
.chart($ts_readLatency_us;$ts_writeLatency_us;@linestack)

.note("<b>P50 and P99 Read Latency (sec)</b>")
.percentile($ts_readLatency_us;0.50).as($p50_latency)
.percentile($ts_readLatency_us;0.99).as($p99_latency)
.chart($p50_latency;$p99_latency;@bar)

//////////////////////////////////////////////////////////////////////////////////
// Storage Metrics
.note("<b>Used storage capacity </b>")

.request($where[0];$what[4];$when[0];$window[1]).as($ts_freestorage_east)
.request($where[0];$what[5];$when[0];$window[1]).as($ts_allocstorage_east)

.tail($ts_freestorage_east;1).as($free_storage_data)
.tail($ts_allocstorage_east;1).as($alloc_storage_data)
.max($free_storage_data).as($free_storage)
.max($alloc_storage_data).as($alloc_storage)

.math(($free_storage/1000000000/$alloc_storage)*100).as($free_storage_percent)
.math(100-$free_storage_percent).as($used_storage_percent)
.group($free_storage_percent;$used_storage_percent).as($storage_data)

.chart($storage_data;@pie)